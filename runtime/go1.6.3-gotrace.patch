diff --git a/src/internal/trace/parser.go b/src/internal/trace/parser.go
index 11f9aba..ff28950 100644
--- a/src/internal/trace/parser.go
+++ b/src/internal/trace/parser.go
@@ -738,7 +738,9 @@ const (
 	EvNextGC         = 34 // memstats.next_gc change [timestamp, next_gc]
 	EvTimerGoroutine = 35 // denotes timer goroutine [timer goroutine id]
 	EvFutileWakeup   = 36 // denotes that the previous wakeup of this goroutine was futile [timestamp]
-	EvCount          = 37
+	EvGoSend         = 37 // goroutine chan send [timestamp, stack]
+	EvGoRecv         = 38 // goroutine chan recv [timestamp, stack]
+	EvCount          = 39
 )
 
 var EventDescriptions = [EvCount]struct {
@@ -783,4 +785,6 @@ var EventDescriptions = [EvCount]struct {
 	EvNextGC:         {"NextGC", false, []string{"mem"}},
 	EvTimerGoroutine: {"TimerGoroutine", false, []string{"g", "unused"}},
 	EvFutileWakeup:   {"FutileWakeup", false, []string{}},
+	EvGoSend:         {"GoSend", true, []string{}},
+	EvGoRecv:         {"GoRecv", true, []string{}},
 }
diff --git a/src/runtime/chan.go b/src/runtime/chan.go
index 5be18be..b3dd1b0 100644
--- a/src/runtime/chan.go
+++ b/src/runtime/chan.go
@@ -23,6 +23,7 @@ const (
 )
 
 type hchan struct {
+	id       uint64         // channel id for using in send/recv events
 	qcount   uint           // total data in the queue
 	dataqsiz uint           // size of the circular queue
 	buf      unsafe.Pointer // points to an array of dataqsiz elements
@@ -46,6 +47,12 @@ func reflect_makechan(t *chantype, size int64) *hchan {
 	return makechan(t, size)
 }
 
+// global evil counters for channel and send/recv event IDs
+var (
+	chID uint64 = 1
+	evID uint64 = 1
+)
+
 func makechan(t *chantype, size int64) *hchan {
 	elem := t.elem
 
@@ -82,6 +89,8 @@ func makechan(t *chantype, size int64) *hchan {
 	c.elemsize = uint16(elem.size)
 	c.elemtype = elem
 	c.dataqsiz = uint(size)
+	chID = atomic.Xadd64(&chID, 1)
+	c.id = chID
 
 	if debugChan {
 		print("makechan: chan=", c, "; elemsize=", elem.size, "; elemalg=", elem.alg, "; dataqsiz=", size, "\n")
@@ -168,6 +177,8 @@ func chansend(t *chantype, c *hchan, ep unsafe.Pointer, block bool, callerpc uin
 	}
 
 	if sg := c.recvq.dequeue(); sg != nil {
+		sg.cid = c.id
+
 		// Found a waiting receiver. We pass the value we want to send
 		// directly to the receiver, bypassing the channel buffer (if any).
 		send(c, sg, ep, func() { unlock(&c.lock) })
@@ -181,6 +192,10 @@ func chansend(t *chantype, c *hchan, ep unsafe.Pointer, block bool, callerpc uin
 			raceacquire(qp)
 			racerelease(qp)
 		}
+
+		evID = atomic.Xadd64(&evID, 1)
+		traceGoSend(evID, c.id, elem2int(ep))
+
 		typedmemmove(c.elemtype, qp, ep)
 		c.sendx++
 		if c.sendx == c.dataqsiz {
@@ -209,6 +224,12 @@ func chansend(t *chantype, c *hchan, ep unsafe.Pointer, block bool, callerpc uin
 	mysg.selectdone = nil
 	gp.waiting = mysg
 	gp.param = nil
+
+	mysg.cid = c.id
+	evID = atomic.Xadd64(&evID, 1)
+	mysg.eventid = atomic.Load64(&evID)
+	traceGoSend(mysg.eventid, c.id, elem2int(ep))
+
 	c.sendq.enqueue(mysg)
 	goparkunlock(&c.lock, "chan send", traceEvGoBlockSend, 3)
 
@@ -257,6 +278,9 @@ func send(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func()) {
 			c.sendx = c.recvx // c.sendx = (c.sendx+1) % c.dataqsiz
 		}
 	}
+	evID = atomic.Xadd64(&evID, 1)
+	sg.eventid = atomic.Load64(&evID)
+	traceGoSend(evID, c.id, elem2int(ep))
 	unlockf()
 	if sg.elem != nil {
 		sendDirect(c.elemtype, sg, ep)
@@ -370,7 +394,6 @@ func chanrecv2(t *chantype, c *hchan, elem unsafe.Pointer) (received bool) {
 func chanrecv(t *chantype, c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) {
 	// raceenabled: don't need to check ep, as it is always on the stack
 	// or is new memory allocated by reflect.
-
 	if debugChan {
 		print("chanrecv: chan=", c, "\n")
 	}
@@ -412,6 +435,7 @@ func chanrecv(t *chantype, c *hchan, ep unsafe.Pointer, block bool) (selected, r
 		if raceenabled {
 			raceacquire(unsafe.Pointer(c))
 		}
+		traceGoRecv(222, c.id, elem2int(ep))
 		unlock(&c.lock)
 		if ep != nil {
 			memclr(ep, uintptr(c.elemsize))
@@ -438,6 +462,7 @@ func chanrecv(t *chantype, c *hchan, ep unsafe.Pointer, block bool) (selected, r
 		if ep != nil {
 			typedmemmove(c.elemtype, ep, qp)
 		}
+		traceGoRecv(333, c.id, elem2int(ep))
 		memclr(qp, uintptr(c.elemsize))
 		c.recvx++
 		if c.recvx == c.dataqsiz {
@@ -469,6 +494,8 @@ func chanrecv(t *chantype, c *hchan, ep unsafe.Pointer, block bool) (selected, r
 	c.recvq.enqueue(mysg)
 	goparkunlock(&c.lock, "chan receive", traceEvGoBlockRecv, 3)
 
+	traceGoRecv(mysg.eventid, c.id, elem2int(ep))
+
 	// someone woke us up
 	if mysg != gp.waiting {
 		throw("G waiting list is corrupted")
@@ -508,6 +535,7 @@ func recv(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func()) {
 			// special (ala sendDirect) needed here.
 			typedmemmove(c.elemtype, ep, sg.elem)
 		}
+		traceGoRecv(sg.eventid, c.id, elem2int(ep))
 	} else {
 		// Queue is full.  Take the item at the
 		// head of the queue.  Make the sender enqueue
@@ -526,6 +554,7 @@ func recv(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func()) {
 		}
 		// copy data from sender to queue
 		typedmemmove(c.elemtype, qp, sg.elem)
+		traceGoRecv(sg.eventid, c.id, elem2int(ep))
 		c.recvx++
 		if c.recvx == c.dataqsiz {
 			c.recvx = 0
@@ -687,3 +716,10 @@ func racesync(c *hchan, sg *sudog) {
 	racereleaseg(sg.g, chanbuf(c, 0))
 	raceacquire(chanbuf(c, 0))
 }
+
+func elem2int(elem unsafe.Pointer) uint64 {
+	if elem == nil {
+		return 0
+	}
+	return uint64(*((*int)(elem)))
+}
diff --git a/src/runtime/runtime2.go b/src/runtime/runtime2.go
index 917fe89..02e7858 100644
--- a/src/runtime/runtime2.go
+++ b/src/runtime/runtime2.go
@@ -171,6 +171,10 @@ type sudog struct {
 	releasetime int64
 	nrelease    int32  // -1 for acquire
 	waitlink    *sudog // g.waiting list
+
+	eventid uint64 // used for correlating send/recv
+	value   string // used for representing value to tracer
+	cid     uint64 // channel id
 }
 
 type gcstats struct {
diff --git a/src/runtime/select.go b/src/runtime/select.go
index b6c3fea..15fbcfc 100644
--- a/src/runtime/select.go
+++ b/src/runtime/select.go
@@ -383,6 +383,7 @@ loop:
 			c.recvq.enqueue(sg)
 
 		case caseSend:
+			traceGoSend(sg.eventid, c.id, elem2int(sg.elem))
 			c.sendq.enqueue(sg)
 		}
 	}
@@ -423,6 +424,9 @@ loop:
 				c.sendq.dequeueSudoG(sglist)
 			} else {
 				c.recvq.dequeueSudoG(sglist)
+				if sg != nil {
+					traceGoRecv(sg.eventid, sg.cid, elem2int(k.elem))
+				}
 			}
 		}
 		sgnext = sglist.waitlink
diff --git a/src/runtime/trace.go b/src/runtime/trace.go
index 805c34f..6f1c5ed 100644
--- a/src/runtime/trace.go
+++ b/src/runtime/trace.go
@@ -57,7 +57,9 @@ const (
 	traceEvNextGC         = 34 // memstats.next_gc change [timestamp, next_gc]
 	traceEvTimerGoroutine = 35 // denotes timer goroutine [timer goroutine id]
 	traceEvFutileWakeup   = 36 // denotes that the previous wakeup of this goroutine was futile [timestamp]
-	traceEvCount          = 37
+	traceEvGoSend         = 37 // goroutine on chan send [timestamp, stack]
+	traceEvGoRecv         = 38 // goroutine on chan recv [timestamp, stack]
+	traceEvCount          = 39
 )
 
 const (
@@ -904,3 +906,11 @@ func traceHeapAlloc() {
 func traceNextGC() {
 	traceEvent(traceEvNextGC, -1, memstats.next_gc)
 }
+
+func traceGoSend(eid, cid, val uint64) {
+	traceEvent(traceEvGoSend, -1, eid, cid, val)
+}
+
+func traceGoRecv(eid, cid, val uint64) {
+	traceEvent(traceEvGoRecv, -1, eid, cid, val)
+}
